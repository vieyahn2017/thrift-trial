//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

serDemo_put_args = function(args) {
  this.msg = null;
  if (args) {
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = new message(args.msg);
    }
  }
};
serDemo_put_args.prototype = {};
serDemo_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.msg = new message();
        this.msg.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

serDemo_put_args.prototype.write = function(output) {
  output.writeStructBegin('serDemo_put_args');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRUCT, 1);
    this.msg.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

serDemo_put_result = function(args) {
};
serDemo_put_result.prototype = {};
serDemo_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

serDemo_put_result.prototype.write = function(output) {
  output.writeStructBegin('serDemo_put_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

serDemoClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
serDemoClient.prototype = {};
serDemoClient.prototype.put = function(msg, callback) {
  this.send_put(msg, callback); 
  if (!callback) {
  this.recv_put();
  }
};

serDemoClient.prototype.send_put = function(msg, callback) {
  this.output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid);
  var args = new serDemo_put_args();
  args.msg = msg;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_put();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

serDemoClient.prototype.recv_put = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new serDemo_put_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
