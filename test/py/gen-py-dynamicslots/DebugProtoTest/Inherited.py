#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:dynamic,slots
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import DebugProtoTest.Srv
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol.TBase import TBase, TFrozenBase, TExceptionBase, TTransport


class Iface(DebugProtoTest.Srv.Iface):
    def identity(self, arg):
        """
        Parameters:
         - arg
        """
        pass


class Client(DebugProtoTest.Srv.Client, Iface):
    def __init__(self, iprot, oprot=None):
        DebugProtoTest.Srv.Client.__init__(self, iprot, oprot)

    def identity(self, arg):
        """
        Parameters:
         - arg
        """
        self.send_identity(arg)
        return self.recv_identity()

    def send_identity(self, arg):
        self._oprot.writeMessageBegin('identity', TMessageType.CALL, self._seqid)
        args = identity_args()
        args.arg = arg
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_identity(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = identity_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "identity failed: unknown result")


class Processor(DebugProtoTest.Srv.Processor, Iface, TProcessor):
    def __init__(self, handler):
        DebugProtoTest.Srv.Processor.__init__(self, handler)
        self._processMap["identity"] = Processor.process_identity

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_identity(self, seqid, iprot, oprot):
        args = identity_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = identity_result()
        try:
            result.success = self._handler.identity(args.arg)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("identity", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class identity_args(TBase):
    """
    Attributes:
     - arg
    """

    __slots__ = (
        'arg',
    )

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'arg', None, None, ),  # 1
    )

    def __init__(self, arg=None,):
        self.arg = arg


class identity_result(TBase):
    """
    Attributes:
     - success
    """

    __slots__ = (
        'success',
    )

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success
